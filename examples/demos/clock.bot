"""
Clock
by Barak Itkin <lightningismyname <at> gmail <dot> com>
written during LGM 2014 as part of the Shoebot workshop
"""

from time import localtime
from math import sin, cos, pi

###########################################
# Constants!                              #
###########################################
# The window size
SIZE = 500

# The amount of border circles the clock shold have
CIRCLE_COUNT = 3
# The distance between circles
CIRCLE_MARGIN = 4
# The thickness of each circle
CIRCLE_THICKNESS = 4

# Colors ###
BLACK = (0, 0, 0)
RED = (1, 0, 0)
DARK_GREY = (0.2, 0.2, 0.2)

# The starting color for the outter circle (from the Tango paletter)
CIRCLE_START = (32 / 255.0, 74 / 255.0, 135 / 255.0)
# The finishing color for the inner circle (from the Tango paletter)
CIRCLE_END = (114 / 255.0, 159 / 255.0, 207 / 255.0)

##########################################
# Code                                   #
##########################################

# We want a square window
size(SIZE, SIZE)
# With one frame per second
speed(1)
# And a black background
background(*BLACK)


def color_interpolate(start, end, fraction=0.5):
    """
    Interpolate two colors
    - The colors are assumed to be of the same length
    - fraction is between 0.0 (start) to 1.0 (end)
    """
    n = len(start)
    return list(
        map(lambda i: start[i] * (1 - fraction) + end[i] * fraction, range(0, n))
    )


def calc_fraction(step_index, total_steps):
    """
    Compute the fraction (between 0.0 to 1.0) for a step
    (from 0 to total_steps - 1) where the first step is 0.0
    and the last step is 1.0
    """
    return step_index / (total_steps - 1.0) if total_steps > 1 else 0.5


def draw_hand(length, frac, color=RED):
    # Note that we need to rotate by -90 degrees (90 CCW) because
    # the hands begin pointing upwards and not as a line pointing
    # to the left
    angle = (frac * pi * 2) - pi / 2

    # Make all the coordinates relative to the center, it will
    # make all the math much easier
    push()
    translate(SIZE / 2, SIZE / 2)
    x, y = length * cos(angle), length * sin(angle)

    # Draw a drop-shadow by doing a dark line offsetted one pixel
    push()
    translate(1, 1)
    stroke(*color_interpolate(color, BLACK, 0.8))
    line(0, 0, x, y)
    pop()

    # Now actually draw the hand
    stroke(*color)
    line(0, 0, x, y)

    pop()


def draw():
    strokewidth(3)
    fill(*DARK_GREY)
    for i in range(0, CIRCLE_COUNT):
        stroke(
            *color_interpolate(CIRCLE_START, CIRCLE_END, calc_fraction(i, CIRCLE_COUNT))
        )
        shrink = 20 + CIRCLE_MARGIN * i
        oval(shrink, shrink, WIDTH - 2 * shrink, HEIGHT - 2 * shrink)

    time = localtime()
    # Draw the hour hand (small and thick)
    strokewidth(5)
    draw_hand(SIZE / 5, (time.tm_hour % 12) / 12.0)
    # Draw the minute hand (long and normal)
    strokewidth(4)
    draw_hand(SIZE / 3, time.tm_min / 60.0)
    # Draw the second hand (very long and thin)
    strokewidth(2)
    draw_hand(SIZE / 2.4, time.tm_sec / 60.0)
