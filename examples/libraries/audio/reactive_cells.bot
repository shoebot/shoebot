"""
Cells move across the screen propelled by particles that react to audio
from the microphone.
by Stuart Axon
"""

import sys

from random import random
from sbaudio import audio, scaled_fft

try:
    from planar.py import Vec2
except ImportError as e:
    raise ImportError(
        f'"{e.msg}\n\nInstall planar by running "$ pip install planar" to run this example.'
    )


class Moveable(object):
    """
    Moveable object.

    Controller functions manage the movement and are called on 'update'
    """

    def __init__(
        self,
        pos=None,
        velocity=None,
        angle=None,
        controller=None,
        controllers=None,
        draw_func=None,
        **kw,
    ):
        self.pos = pos or Vec2(WIDTH / 2, HEIGHT / 2)
        self.velocity = velocity or 0.0
        self.angle = angle or 0
        self.draw_func = draw_func
        if controller:
            self.controllers = [controller]
        else:
            self.controllers = []
        if controllers:
            self.controllers.extend(controllers)

    def update(self):
        """
        Call all the controllers to update coordinates.

        Angles are always wrapped to 360 degrees.
        """
        pos, angle, velocity = self.pos, self.angle, self.velocity
        for controller in self.controllers:
            pos, angle, velocity = controller(pos, angle % 360, velocity)
        self.pos, self.angle, self.velocity = pos, angle % 360, velocity
        self.pos += Vec2.polar(angle=angle, length=velocity)

    def draw(self):
        push()
        translate(self.pos.x, self.pos.y)
        rotate(-self.angle)  # nodebox1/shoebot rotation is anticlockwise
        self.draw_func()
        pop()


class Particle(Moveable):
    def __init__(self, hp=250, size=80, **kwargs):
        Moveable.__init__(self, draw_func=self.draw_func, **kwargs)
        self.hp = hp
        self.initial_hp = hp
        self.size = size

    def update(self):
        super(self.__class__, self).update()
        self.hp -= 1
        return self.hp > 0

    def draw_func(self):
        # a = 1.0
        # if 0 < self.hp < 150:
        #     a = self.hp / 250.0
        # f = fill()
        # arrow(0, 0, self.size, fill=(f.r, f.g, f.b, a * .5))
        s = 1.0 + (self.size / self.initial_hp) * self.hp
        circle(0, 0, s)


def key_controller(pos, angle, velocity):
    if keydown:
        if keycode == KEY_UP:
            velocity += 0.2
        elif keycode == KEY_DOWN:
            velocity -= 0.2
        elif keycode == KEY_LEFT:
            angle -= 5
        elif keycode == KEY_RIGHT:
            angle += 5
        elif keycode == KEY_SPACE:
            velocity *= 0.9
        elif keycode == KEY_RETURN:
            pos = Vec2(WIDTH / 2, HEIGHT / 2)
            velocity = 0.0
            angle = 0
    return pos, angle, velocity


def inertia_controller(pos, angle, velocity):
    return pos, angle, velocity * 0.99


def bounds_controller(pos, angle, velocity):
    if pos.x < 10 or pos.x > WIDTH:
        angle = 180 - angle
    if pos.y < 10 or pos.y > HEIGHT - 10:
        angle = -angle
    return pos, angle, velocity


def random_emitter(particles, **kw):
    if random() > 0.1:
        p = Particle(
            velocity=random() * 2.0,
            angle=random() * 360,
            controller=inertia_controller,
            **kw,
        )
        particles.append(p)


def update_particles(particles):
    """
    Update particles

    return: list of particles to update
    """
    part = []
    for p in particles:
        if p.update():
            part.append(p)
    return part


def loudness_emitter(particles, **kw):
    # pos = kw.get('pos', Vec2(0, 0))
    trigger_energy = kw.get("trigger_energy", 0.15)

    energy = max(scaled_fft(audio.spectrogram))
    if energy > trigger_energy:
        for angle in range(0, 360, 30):
            p = Particle(
                velocity=2.0,
                angle=angle,
                controller=inertia_controller,
                hp=energy * 5.0,
                **kw,
            )
            particles.append(p)
        return True
    else:
        return False


class CircleDoobry(object):
    def __init__(self, pos=(0, 0), velocity=(0, 0), size=1.0, trigger_energy=12):
        self.pos = Vec2(*pos)
        self.velocity = Vec2(*velocity)
        self.particles = []
        self.size = size
        self.trigger_energy = trigger_energy

    def update(self):
        self.pos += self.velocity

        if self.pos.x > WIDTH + self.size:
            self.pos = Vec2(-self.size, self.pos.y)
        elif self.pos.x < -self.size:
            self.pos = Vec2(WIDTH + self.size, self.pos.y)

        if self.pos.y > HEIGHT + self.size:
            self.pos = Vec2(self.pos.x, -self.size)
        elif self.pos.y < -self.size:
            self.pos = Vec2(self.pos.x, HEIGHT + self.size)

        self.emitting = loudness_emitter(
            self.particles, pos=self.pos, size=4.0, trigger_energy=self.trigger_energy
        )
        self.particles = update_particles(self.particles)

    def draw(self):
        stroke(0.5, 0.1, 0.1)
        strokewidth(2)

        fill(0.5, 0.1, 0.1)
        nostroke()
        for p in self.particles:
            p.draw()

        for i, sz in enumerate(range(10, 40, 10)):
            s = stroke()
            sz *= self.size
            s.a = sz * 0.4
            stroke(s.r, s.g, s.b, i * 0.4)
            if i == 1:
                fill(1, 1, 1, i * 0.4)
            else:
                nofill()
            circle(self.pos.x - (sz / 2), self.pos.y - (sz / 2), sz)


def setup():
    global doobries
    speed(60)
    size(800, 600)
    # device=firstfuzzydevice('loop')
    # audio.settings(input_device=device)
    # transform(mode=CENTER)

    # particles = []
    doobries = []
    for i in range(0, 10):
        doobries.append(
            CircleDoobry(
                size=1.0 + random() * 0.3,
                pos=(random() * WIDTH, random() * HEIGHT),
                velocity=(random() * 5.0 - 2.5, random() * 3.0 - 2.5),
                trigger_energy=random() * 4.0,
            )
        )


def draw():
    background(1)
    for d in doobries:
        d.update()
        d.draw()
